#ifndef HDDE_H
#define HDDE_H

#include "Core.h"
#include "Instance.h"
#include "Log.h"
#include "Parameters.h"
#include "RNG.h"
#include "Solution.h"
#include "constructions/NEH.h"
#include "local-search/RLS.h"
#include "constructions/LPT.h"

#include <vector>

class HDDE {

  public:
    HDDE(Instance instance, Parameters params);

    // verify if the sequence exists in the population
    bool new_in_population(std::vector<size_t> &sequence);

    // initialize the population
    void generate_initial_pop();

    // generate one random solution
    std::vector<size_t> generate_random_sequence();

    // generate one solution based on other three in the population. The solution generated don't follow the constraints
    // of the problem for instance, it might be generated a solution like {5, 4, 5, 1, 3}
    std::vector<size_t> mutation();

    // take the solution generated by mutation and converts it into a valid solution
    Solution crossover(std::vector<size_t> &pi);

    // run mutation and crossover
    Solution generate_new_solution();
    size_t find_best_solution();

    Solution solve();

  private:
    Instance m_instance;
    Parameters m_params;
    size_t m_time_limit;
    std::vector<Solution> m_pop;
};

#endif