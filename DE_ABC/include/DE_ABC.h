#ifndef DEABC_H
#define DEABC_H

#include "Core.h"
#include "Instance.h"
#include "Log.h"
#include "Parameters.h"
#include "RNG.h"
#include "Solution.h"
#include "constructions/MinMax.h"
#include "constructions/NEH.h"
#include "local-search/RLS.h"

#include <vector>

class DE_ABC { //NOLINT

  public:
    DE_ABC(Instance instance, Parameters params);

    // verify if the sequence exists in the population
    bool new_in_population(std::vector<size_t> &sequence);

    // initialize the population
    void generate_initial_pop();

    // pick two solutions and return the index of the one which has the best makespan
    size_t tournament();

    // generate one solution based on other three in the population. The solution generated don't follow the constraints
    // of the problem for instance, it might be generated a solution like {5, 4, 5, 1, 3}
    void mutation(std::vector<size_t> &new_pi);

    // take the solution generated by mutation and converts it into a valid solution
    Solution crossover(std::vector<size_t> &pi);

    // run mutation and crossover
    Solution generate_new_solution();

    // update neighborhood list
    void update_neighborhood();

    // choose two random index and swap their jobs
    size_t swap(Solution &s);

    // choose two random index, p1 and p2, and insert the job in p2 on the position p1
    size_t insertion(Solution &s);

    // apply swaps or insertion in some solutions, trying to improve them
    void self_adaptative();

    // apply several insertions to solutions that have not been modified by self-adaptative process
    void replace_unchanged();

    // replace the worst solution by the new one generated, if this make sense
    void replace_worst_solution(Solution &s);

    // find the best solution
    size_t find_best_solution();

    // Do several RLS
    void local_search();

    Solution solve();

  private:
    Instance m_instance;
    Parameters m_params;
    size_t m_time_limit;
    std::vector<Solution> m_pop;
    std::vector<bool> m_changed;
    std::vector<size_t> m_BNL;
    std::vector<size_t> m_NL;
    NEH helper;
};

#endif